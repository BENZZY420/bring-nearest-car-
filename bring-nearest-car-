local Players = game:GetService("Players")
local player = Players.LocalPlayer

local function getCharacterAndRootPart()
	local character = player.Character or player.CharacterAdded:Wait()
	local rootPart = character:WaitForChild("HumanoidRootPart")
	return character, rootPart
end

local function bringClosestEmptyCarToPlayer()
	local character, rootPart = getCharacterAndRootPart()
	local civCars = workspace:FindFirstChild("CivCars")
	if not civCars then
		warn("CivCars folder not found!")
		return
	end

	local closestCar = nil
	local shortestDistance = math.huge
	local playerPosition = rootPart.Position

	for _, car in ipairs(civCars:GetChildren()) do
		if car:IsA("Model") and car:FindFirstChild("DriveSeat") then
			local driveSeat = car:FindFirstChild("DriveSeat")
			if driveSeat:IsA("VehicleSeat") and driveSeat.Occupant == nil then
				local distance = (driveSeat.Position - playerPosition).Magnitude
				if distance < shortestDistance then
					shortestDistance = distance
					closestCar = car
				end
			end
		end
	end

	if not closestCar then
		Library:Notify({
			Title = "Bring Nearest Car",
			Description = "❌ Could not find any empty car nearby!",
			Time = 3
		})
		return
	end

	if not closestCar.PrimaryPart then
		closestCar.PrimaryPart = closestCar:FindFirstChild("PrimaryPart") or closestCar:FindFirstChildWhichIsA("BasePart")
		if not closestCar.PrimaryPart then
			warn("Car has no PrimaryPart!")
			return
		end
	end

	local rayOrigin = rootPart.Position + Vector3.new(0, 5, 0)
	local rayDirection = Vector3.new(0, -50, 0)
	local raycastParams = RaycastParams.new()
	raycastParams.FilterDescendantsInstances = {character, closestCar}
	raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

	local rayResult = workspace:Raycast(rayOrigin, rayDirection, raycastParams)
	local groundY = rootPart.Position.Y
	if rayResult then
		groundY = rayResult.Position.Y
	end

	local carSize = closestCar:GetExtentsSize()
	local forward = rootPart.CFrame.LookVector
	local targetPos = rootPart.Position + forward * (carSize.Z / 2 + 3)
	targetPos = Vector3.new(targetPos.X, groundY + carSize.Y / 2 + 0.1, targetPos.Z)
	local targetCFrame = CFrame.new(targetPos, targetPos + forward)

	closestCar:PivotTo(targetCFrame)

	for _, part in ipairs(closestCar:GetDescendants()) do
		if part:IsA("BasePart") then
			part.Anchored = true
		end
	end

	task.wait(0.3) -- Let physics settle

	for _, part in ipairs(closestCar:GetDescendants()) do
		if part:IsA("BasePart") then
			part.Anchored = false
		end
	end

	local posValue = closestCar:FindFirstChild("Position") or closestCar:FindFirstChild("LastLocation") or closestCar:FindFirstChild("SpawnPoint")
	if posValue and posValue:IsA("Vector3Value") then
		posValue.Value = targetPos
	end

	-- ✅ Seat without ever teleporting: direct weld method
	task.delay(0.1, function()
		local driveSeat = closestCar:FindFirstChild("DriveSeat")
		local humanoid = character:FindFirstChildOfClass("Humanoid")
		if driveSeat and humanoid then
			-- Put character directly on the seat
			character:SetPrimaryPartCFrame(driveSeat.CFrame + Vector3.new(0, 3, 0)) -- hover above seat to fall in
			task.wait(0.1)
			driveSeat:Sit(humanoid)
		end
	end)

	Library:Notify({
		Title = "Bring Nearest Car",
		Description = "✅ Nearest car brought to you and entered!",
		Time = 3
	})
end

player.CharacterAdded:Connect(function()
	getCharacterAndRootPart()
end)

bringClosestEmptyCarToPlayer()
